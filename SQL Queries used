CREATE DATABASE CafeDB;
USE CafeDB;


-- 1 Find total sales per hour
SELECT HOUR(Time) AS hour, COUNT(*) AS sales_count
FROM sales_orderly
GROUP BY hour
ORDER BY sales_count DESC;

-- 2 Find peak sales hour (highest orders)
SELECT HOUR(Time) AS peak_hour, COUNT(*) AS total_orders
FROM sales_orderly
GROUP BY peak_hour
ORDER BY total_orders DESC
LIMIT 1;

-- 3 Find the total revenue per hour
SELECT HOUR(Time) AS hour, SUM(Order_Total) AS revenue
FROM sales_orderly
GROUP BY hour
ORDER BY revenue DESC;

-- 4 Find the busiest day of the week for sales
SELECT DAYNAME(Date) AS day, COUNT(*) AS total_orders
FROM sales_orderly
GROUP BY day
ORDER BY total_orders DESC;

-- 5 Find peak sales day for revenue
SELECT Date, SUM(Order_Total) AS total_revenue
FROM sales_orderly
GROUP BY Date
ORDER BY total_revenue DESC
LIMIT 1;

-- 6 Compare Dine-in vs. Takeaway vs. Online orders
SELECT Order_Type, COUNT(*) AS total_orders
FROM sales_orderly
GROUP BY Order_Type
ORDER BY total_orders DESC;

-- 7 Revenue generated by each order type
SELECT Order_Type, SUM(Order_Total) AS total_revenue
FROM sales_orderly
GROUP BY Order_Type
ORDER BY total_revenue DESC;

-- 8 Find the best-selling product
SELECT Product_ID, SUM(Quantity) AS total_sold
FROM sales_orderly
GROUP BY Product_ID
ORDER BY total_sold DESC
LIMIT 1;

-- 9 Find peak hour per order type (Dine-in, Takeaway, Online)
SELECT HOUR(Time) AS peak_hour, Order_Type, COUNT(*) AS total_orders
FROM sales_orderly
GROUP BY peak_hour, Order_Type
ORDER BY total_orders DESC;

-- 10 Find total raw materials used per day
SELECT s.Date, u.Material_ID, SUM(u.used_quantity) AS total_used
FROM used_materials u
JOIN sales_orderly s ON u.Sale_ID = s.Sale_ID  -- Ensuring we get the date from sales_orderly
GROUP BY s.Date, u.Material_ID
ORDER BY s.Date DESC;


-- 11 Find the most used raw material
SELECT Material_ID, SUM(used_quantity) AS total_usage
FROM used_materials
GROUP BY Material_ID
ORDER BY total_usage DESC
LIMIT 1;

-- 12 Find the best hour for dine-in orders
SELECT HOUR(Time) AS hour, COUNT(*) AS total_dinein_orders
FROM sales_orderly
WHERE Order_Type = 'Dine-in'
GROUP BY hour
ORDER BY total_dinein_orders DESC
LIMIT 1;

-- 13 Find the best hour for delivery orders
SELECT HOUR(Time) AS hour, COUNT(*) AS total_delivery_orders
FROM sales_orderly
WHERE Order_Type = 'Delivery'
GROUP BY hour
ORDER BY total_delivery_orders DESC
LIMIT 1;

--  14 Find total profit per day (assuming cost data exists)
SELECT Date, SUM(Order_Total - (Price * Quantity)) AS daily_profit
FROM sales_orderly
JOIN menu_raw ON sales_orderly.Product_ID = menu_raw.Product_ID
GROUP BY Date
ORDER BY daily_profit DESC;

-- 15 Find most profitable product
SELECT s.Product_ID, 
       SUM(s.Quantity * m.Margin) AS total_profit
FROM sales_orderly s
JOIN menu m ON s.Product_ID = m.Product_ID
GROUP BY s.Product_ID
ORDER BY total_profit DESC
LIMIT 1;

-- 16 Find total profit earned from all sales
SELECT SUM(m.Margin * s.Quantity) AS total_profit
FROM sales_orderly s
JOIN menu m ON s.Product_ID = m.Product_ID;

-- 17 Find total revenue, cost, and profit
SELECT 
    SUM(s.Order_Total) AS total_revenue, 
    SUM(m.Price * s.Quantity) AS total_cost,
    SUM(m.Margin * s.Quantity) AS total_profit
FROM sales_orderly s
JOIN menu m ON s.Product_ID = m.Product_ID;

-- 18 Find profit percentage for each product
SELECT Product_ID, 
       ((Margin / Price) * 100) AS profit_percentage
FROM menu;

-- 19 Find the most profitable product (highest margin per sale)
SELECT Product_ID, Margin 
FROM menu
ORDER BY Margin DESC
LIMIT 1;

-- 20 Find the least profitable product
SELECT Product_ID, Margin 
FROM menu
ORDER BY Margin ASC
LIMIT 1;

-- 21 Find the least valuable product in terms of total profit generated
SELECT s.Product_ID, SUM(s.Quantity * m.Margin) AS total_profit_generated
FROM sales_orderly s
JOIN menu m ON s.Product_ID = m.Product_ID
GROUP BY s.Product_ID
ORDER BY total_profit_generated ASC
LIMIT 1;

-- 22 Find products that are being sold at a loss (negative profit margin)
SELECT Product_ID, Product_id, Margin
FROM menu
WHERE Margin < 0;

-- 23 Find month-over-month sales growth rate
SELECT DATE_FORMAT(Date, '%Y-%m') AS month, 
       SUM(Order_Total) AS total_revenue, 
       (SUM(Order_Total) - LAG(SUM(Order_Total)) OVER (ORDER BY DATE_FORMAT(Date, '%Y-%m'))) / LAG(SUM(Order_Total)) OVER (ORDER BY DATE_FORMAT(Date, '%Y-%m')) * 100 AS growth_rate
FROM sales_orderly
GROUP BY month
ORDER BY month;

-- 24 Find the most expensive and cheapest order ever placed
SELECT Order_ID2, Order_Total
FROM sales_orderly
ORDER BY Order_Total DESC
LIMIT 1;  -- Most expensive order
SELECT Order_ID2, Order_Total
FROM sales_orderly
ORDER BY Order_Total ASC
LIMIT 1;  -- Cheapest order

-- 25 Find the busiest day and the least busy day (total orders placed)
SELECT Date, COUNT(*) AS total_orders
FROM sales_orderly
GROUP BY Date
ORDER BY total_orders DeSC -- Busiest day 
LIMIT 1;
SELECT Date, COUNT(*) AS total_orders
FROM sales_orderly
GROUP BY Date
ORDER BY total_orders ASC -- Least busiest day
LIMIT 1; 

-- Inventory management starts here 
-- First We are going to insert the values into a table called used_materials
DROP TABLE IF EXISTS used_materials;
CREATE TABLE used_materials (
    Sale_ID INT,
    Order_ID2 INT,
    Product_ID INT,
    Material_ID INT,
    used_quantity DECIMAL(10,2)
);

INSERT INTO used_materials (Sale_ID, Order_ID2, Product_ID, Material_ID, used_quantity)
SELECT 
    so.Sale_ID,
    so.Order_ID2,
    so.Product_ID,
    mr.Material_ID,
    mr.Quantity_Used * so.Quantity AS used_quantity
FROM sales_orderly so
JOIN menu_raw mr
  ON so.Product_ID = mr.Product_ID;

-- Now lets create a new table called inventory_backup and assign rawmaterials sheet data to it
DROP TABLE IF EXISTS inventory_backup;
CREATE TABLE inventory_backup AS 
SELECT * FROM raw_materials;


SET SQL_SAFE_UPDATES = 0;

-- now create a temp table to store the used value
DROP TABLE IF EXISTS temp_usage1;
CREATE TEMPORARY TABLE temp_usage1
SELECT
    Material_Id,
    SUM(used_quantity) AS total_used
FROM used_materials
GROUP BY Material_Id;

-- Now update the backup table tby subtracting used materials from existing materials
UPDATE inventory_backup as ib 
JOIN temp_usage1 tu ON ib.Material_Id = tu.Material_Id
SET ib.Total_Units = ib.Total_Units - tu.total_used;

SELECT * FROM inventory_backup LIMIT 200;
-- Update Total_Units to ensure no negative values
UPDATE inventory_backup
SET Total_Units = 
    CASE 
        WHEN Units = 'g' AND Total_Units <= 0 THEN 100
        WHEN Units = 'ml' AND Total_Units <= 0 THEN 750
        WHEN Units = 'ml' AND Total_Units <= 0 THEN 750
        WHEN Units = 'units' AND Total_Units <= 0 THEN 15
        WHEN Units = 'unit' AND Total_Units <= 0 THEN 15
        ELSE Total_Units
    END;

SELECT * FROM inventory_backup;


-- Now if the materials go below the marked value then the stock will refill and gives a mail to us b y a python code
SELECT 
  Material_Id, 
  Total_Units
FROM inventory_backup
WHERE Total_Units <= 10;


-- Add original_qty column if it doesn't exist

DROP TABLE IF EXISTS refill_log;

CREATE TABLE IF NOT EXISTS refill_log (
    log_id INT AUTO_INCREMENT PRIMARY KEY,
    Material_Id INT,
    old_stock DECIMAL(10,2),
    refill_amount DECIMAL(10,2),
    new_stock DECIMAL(10,2),
    unit_type VARCHAR(10),
    refill_count INT,  -- New column to track how many times a material was refilled
    refill_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Stores the date and time of refill
    refill_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP -- Updates time if modified
);


DROP PROCEDURE IF EXISTS sp_refill_from_zero_stock;
DELIMITER //
CREATE PROCEDURE sp_refill_from_zero_stock()
BEGIN
    -- Declare variables
    DECLARE done INT DEFAULT FALSE;
    DECLARE material_id INT;
    DECLARE zero_date DATE;
    DECLARE old_stock DECIMAL(10,2);
    DECLARE refill_amount DECIMAL(10,2);
    DECLARE new_stock DECIMAL(10,2);
    DECLARE unit_type VARCHAR(10);
    DECLARE refill_count INT DEFAULT 1;

    -- Cursor to find the first date a material's stock dropped to 0 or negative
    DECLARE cur CURSOR FOR 
    SELECT sp.Material_Id, MIN(sp.sales_date) AS zero_date, rm.stock, rm.unit_type
    FROM sales_product sp
    JOIN raw_materials rm ON sp.Material_Id = rm.Material_Id
    WHERE rm.stock <= 0
    GROUP BY sp.Material_Id;

    -- Declare handler for loop termination
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Open cursor
    OPEN cur;

    refill_loop: LOOP
        FETCH cur INTO material_id, zero_date, old_stock, unit_type;

        IF done THEN
            LEAVE refill_loop;
        END IF;

        -- If stock is NULL or negative, assume it was 0 before refill
        SET old_stock = IFNULL(old_stock, 0);

        -- Determine refill amount based on unit type
        SET refill_amount = 
            CASE 
                WHEN unit_type = 'g' THEN 100
                WHEN unit_type = 'ml' THEN 750
                WHEN unit_type = 'units' THEN 15
                ELSE 50  -- Default value if unit type is unknown
            END;

        -- Calculate new stock value
        SET new_stock = old_stock + refill_amount;

        -- Update inventory with new stock level
        UPDATE raw_materials
        SET stock = new_stock
        WHERE Material_Id = material_id;

        -- Insert refill log entry with correct past date
        INSERT INTO refill_log (Material_Id, old_stock, refill_amount, new_stock, unit_type, refill_count, refill_date)
        VALUES (material_id, old_stock, refill_amount, new_stock, unit_type, refill_count, zero_date);
    END LOOP;

    -- Close cursor
    CLOSE cur;
END //

DELIMITER ;

select * from refill_log

ALTER TABLE inventory_backup
ADD COLUMN original_qty DECIMAL(10,2) NOT NULL DEFAULT 100;

DROP PROCEDURE IF EXISTS sp_record_sale;

DELIMITER $$

CREATE PROCEDURE sp_record_sale(
    IN p_Order_ID2 INT,
    IN p_Product_ID INT,
    IN p_Quantity INT,
    OUT p_new_Sale_ID INT
)
BEGIN
    DECLARE v_Price INT;
    DECLARE v_Item_Subtotal INT;
    DECLARE v_Order_Subtotal INT;
    DECLARE v_Delivery_Charge INT DEFAULT 0;
    DECLARE v_Order_Total INT;
    
    -- 1. Get the price from the menu table
    SELECT Price INTO v_Price FROM menu WHERE Product_ID = p_Product_ID;
    
    -- 2. Calculate values
    SET v_Item_Subtotal = v_Price * p_Quantity;
    SET v_Order_Subtotal = v_Item_Subtotal;  -- Assuming one item per order
    SET v_Order_Total = v_Order_Subtotal + v_Delivery_Charge;

    -- 3. Insert into sales_orderly
    INSERT INTO sales_orderly (
        Order_ID2, 
        Date, 
        Time, 
        Order_Type, 
        Product_ID, 
        Price, 
        Quantity, 
        Item_Subtotal, 
        Order_Subtotal, 
        Delivery_Charge, 
        Order_Total
    )
    VALUES (
        p_Order_ID2, 
        CURDATE(),   -- Auto-fills the current date
        CURTIME(),   -- Auto-fills the current time
        'Dine-in',   -- Default order type
        p_Product_ID, 
        v_Price, 
        p_Quantity, 
        v_Item_Subtotal, 
        v_Order_Subtotal, 
        v_Delivery_Charge, 
        v_Order_Total
    );

    -- 4. Get the new Sale_ID
    SET p_new_Sale_ID = LAST_INSERT_ID();

    -- 5. Insert used materials from menu_raw table
    INSERT INTO used_materials (
        Sale_ID, 
        Order_ID2, 
        Product_ID, 
        Material_ID, 
        used_quantity
    )
    SELECT 
        p_new_Sale_ID,
        p_Order_ID2,
        mr.Product_ID,
        mr.Material_ID,
        mr.Quantity_Used * p_Quantity AS used_quantity
    FROM menu_raw mr
    WHERE mr.Product_ID = p_Product_ID;

    -- 6. Update inventory_backup
    UPDATE inventory_backup inv
    JOIN (
        SELECT Material_ID, SUM(mr.Quantity_Used * p_Quantity) AS used_qty
        FROM menu_raw mr
        WHERE mr.Product_ID = p_Product_ID
        GROUP BY Material_Id
    ) AS mat_usage ON inv.Material_ID = mat_usage.Material_ID
    SET inv.Total_Units = GREATEST(0, inv.Total_Units - mat_usage.used_qty);  -- Prevent negative stock

END $$

DELIMITER ;

-- Turn off safe mode
SET SQL_SAFE_UPDATES = 0;

-- Example call (Only Order_ID2, Product_ID, and Quantity required)
CALL sp_record_sale(102, 277, 5, @new_saleid);

-- Check results
SELECT * FROM sales_orderly;
SELECT * FROM used_materials;
SELECT * FROM inventory_backup;
